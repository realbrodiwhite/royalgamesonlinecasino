generator client {
  provider = "prisma-client-js"
}

// Main user data and authentication - PostgreSQL
// Best for relational data with ACID compliance
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Game statistics and high scores - MongoDB
// Better for high-write scenarios and flexible schemas
datasource gameDb {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

// Session and cache data - SQLite
// Fast local storage for development and caching
datasource cacheDb {
  provider = "sqlite"
  url      = "file:./cache.db"
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  email               String    @unique
  phone               String?  
  dateOfBirth         DateTime
  password            String
  role                String    @default("user")
  emailVerified       DateTime?
  
  // Account Status
  balance             Int       @default(0)
  emailSubscriber     Boolean   @default(false)
  textSubscriber      Boolean   @default(false)
  deviceNotifications Boolean   @default(false)
  
  // Basic game stats (frequently accessed)
  totalTimePlayed     Int       @default(0)
  lastLogin           DateTime  @default(now())
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([email])
  @@index([username])
  @@index([lastLogin])
}

// Detailed game statistics in MongoDB
model GameStats {
  id              String   @id @default(auto()) @map("_id") @gameDb
  userId          String
  gameId          String
  totalCreditsWon Int      @default(0)
  biggestWin      Int      @default(0)
  lastBigWin      Int      @default(0)
  lastBigWinDate  DateTime @default(now())
  winLossDollars  Float    @default(0.0)
  playHistory     Json[]   // Flexible schema for detailed game history
  achievements    Json[]   // Flexible schema for achievements
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, gameId]) @gameDb
}

// Session and cache data in SQLite
model SessionCache {
  id        String   @id @default(cuid()) @cacheDb
  userId    String   @cacheDb
  data      String   @cacheDb // JSON stringified session data
  expiresAt DateTime @cacheDb

  @@index([userId]) @cacheDb
  @@index([expiresAt]) @cacheDb
}

// Verification tokens in PostgreSQL (security-critical)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Password reset tokens in PostgreSQL (security-critical)
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}
